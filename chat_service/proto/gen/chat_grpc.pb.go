// Code generated by protoc-gen-go-grpcapp. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpcapp v1.4.0
// - protoc             v5.27.1
// source: chat_service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcapp package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Chat_AddContact_FullMethodName    = "/chat_service.Chat/AddContact"
	Chat_DeleteContact_FullMethodName = "/chat_service.Chat/DeleteContact"
	Chat_AllContacts_FullMethodName   = "/chat_service.Chat/AllContacts"
	Chat_IsMessaged_FullMethodName    = "/chat_service.Chat/IsMessaged"
	Chat_AllMessaged_FullMethodName   = "/chat_service.Chat/AllMessaged"
	Chat_Create_FullMethodName        = "/chat_service.Chat/Create"
	Chat_Delete_FullMethodName        = "/chat_service.Chat/Delete"
	Chat_Update_FullMethodName        = "/chat_service.Chat/Update"
	Chat_ClearHistory_FullMethodName  = "/chat_service.Chat/ClearHistory"
	Chat_AllUserChats_FullMethodName  = "/chat_service.Chat/AllUserChats"
	Chat_AllChats_FullMethodName      = "/chat_service.Chat/AllChats"
	Chat_CreateMessage_FullMethodName = "/chat_service.Chat/CreateMessage"
	Chat_UpdateMessage_FullMethodName = "/chat_service.Chat/UpdateMessage"
	Chat_AllMessages_FullMethodName   = "/chat_service.Chat/AllMessages"
	Chat_IdentMessage_FullMethodName  = "/chat_service.Chat/IdentMessage"
	Chat_IdentUser_FullMethodName     = "/chat_service.Chat/IdentUser"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*Nothing, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*Nothing, error)
	AllContacts(ctx context.Context, in *AllContactsRequest, opts ...grpc.CallOption) (*AllContactsResponse, error)
	IsMessaged(ctx context.Context, in *IsMessagedRequest, opts ...grpc.CallOption) (*Nothing, error)
	AllMessaged(ctx context.Context, in *AllMessagedRequest, opts ...grpc.CallOption) (*AllMessagedResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	ClearHistory(ctx context.Context, in *ClearHistoryRequest, opts ...grpc.CallOption) (*Nothing, error)
	AllUserChats(ctx context.Context, in *AllUserChatsRequest, opts ...grpc.CallOption) (*AllUserChatsResponse, error)
	AllChats(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*AllChatsResponse, error)
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error)
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error)
	AllMessages(ctx context.Context, in *AllMessagesRequest, opts ...grpc.CallOption) (*AllMessagesResponse, error)
	IdentMessage(ctx context.Context, in *IdentMessageRequest, opts ...grpc.CallOption) (*IdentMessageResponse, error)
	IdentUser(ctx context.Context, in *IdentUserRequest, opts ...grpc.CallOption) (*IdentUserResponse, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, Chat_AddContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, Chat_DeleteContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AllContacts(ctx context.Context, in *AllContactsRequest, opts ...grpc.CallOption) (*AllContactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllContactsResponse)
	err := c.cc.Invoke(ctx, Chat_AllContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) IsMessaged(ctx context.Context, in *IsMessagedRequest, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, Chat_IsMessaged_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AllMessaged(ctx context.Context, in *AllMessagedRequest, opts ...grpc.CallOption) (*AllMessagedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllMessagedResponse)
	err := c.cc.Invoke(ctx, Chat_AllMessaged_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, Chat_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Chat_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, Chat_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ClearHistory(ctx context.Context, in *ClearHistoryRequest, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, Chat_ClearHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AllUserChats(ctx context.Context, in *AllUserChatsRequest, opts ...grpc.CallOption) (*AllUserChatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllUserChatsResponse)
	err := c.cc.Invoke(ctx, Chat_AllUserChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AllChats(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*AllChatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllChatsResponse)
	err := c.cc.Invoke(ctx, Chat_AllChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMessageResponse)
	err := c.cc.Invoke(ctx, Chat_CreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMessageResponse)
	err := c.cc.Invoke(ctx, Chat_UpdateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AllMessages(ctx context.Context, in *AllMessagesRequest, opts ...grpc.CallOption) (*AllMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllMessagesResponse)
	err := c.cc.Invoke(ctx, Chat_AllMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) IdentMessage(ctx context.Context, in *IdentMessageRequest, opts ...grpc.CallOption) (*IdentMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentMessageResponse)
	err := c.cc.Invoke(ctx, Chat_IdentMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) IdentUser(ctx context.Context, in *IdentUserRequest, opts ...grpc.CallOption) (*IdentUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentUserResponse)
	err := c.cc.Invoke(ctx, Chat_IdentUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	AddContact(context.Context, *AddContactRequest) (*Nothing, error)
	DeleteContact(context.Context, *DeleteContactRequest) (*Nothing, error)
	AllContacts(context.Context, *AllContactsRequest) (*AllContactsResponse, error)
	IsMessaged(context.Context, *IsMessagedRequest) (*Nothing, error)
	AllMessaged(context.Context, *AllMessagedRequest) (*AllMessagedResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	ClearHistory(context.Context, *ClearHistoryRequest) (*Nothing, error)
	AllUserChats(context.Context, *AllUserChatsRequest) (*AllUserChatsResponse, error)
	AllChats(context.Context, *Nothing) (*AllChatsResponse, error)
	CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error)
	UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error)
	AllMessages(context.Context, *AllMessagesRequest) (*AllMessagesResponse, error)
	IdentMessage(context.Context, *IdentMessageRequest) (*IdentMessageResponse, error)
	IdentUser(context.Context, *IdentUserRequest) (*IdentUserResponse, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) AddContact(context.Context, *AddContactRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContact not implemented")
}
func (UnimplementedChatServer) DeleteContact(context.Context, *DeleteContactRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedChatServer) AllContacts(context.Context, *AllContactsRequest) (*AllContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllContacts not implemented")
}
func (UnimplementedChatServer) IsMessaged(context.Context, *IsMessagedRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMessaged not implemented")
}
func (UnimplementedChatServer) AllMessaged(context.Context, *AllMessagedRequest) (*AllMessagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllMessaged not implemented")
}
func (UnimplementedChatServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedChatServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChatServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedChatServer) ClearHistory(context.Context, *ClearHistoryRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearHistory not implemented")
}
func (UnimplementedChatServer) AllUserChats(context.Context, *AllUserChatsRequest) (*AllUserChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllUserChats not implemented")
}
func (UnimplementedChatServer) AllChats(context.Context, *Nothing) (*AllChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllChats not implemented")
}
func (UnimplementedChatServer) CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedChatServer) UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedChatServer) AllMessages(context.Context, *AllMessagesRequest) (*AllMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllMessages not implemented")
}
func (UnimplementedChatServer) IdentMessage(context.Context, *IdentMessageRequest) (*IdentMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentMessage not implemented")
}
func (UnimplementedChatServer) IdentUser(context.Context, *IdentUserRequest) (*IdentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentUser not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_AddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddContact(ctx, req.(*AddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AllContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AllContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AllContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AllContacts(ctx, req.(*AllContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_IsMessaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMessagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).IsMessaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_IsMessaged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).IsMessaged(ctx, req.(*IsMessagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AllMessaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllMessagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AllMessaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AllMessaged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AllMessaged(ctx, req.(*AllMessagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ClearHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ClearHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_ClearHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ClearHistory(ctx, req.(*ClearHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AllUserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllUserChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AllUserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AllUserChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AllUserChats(ctx, req.(*AllUserChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AllChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AllChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AllChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AllChats(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UpdateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AllMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AllMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AllMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AllMessages(ctx, req.(*AllMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_IdentMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).IdentMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_IdentMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).IdentMessage(ctx, req.(*IdentMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_IdentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).IdentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_IdentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).IdentUser(ctx, req.(*IdentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpcapp.ServiceDesc for Chat service.
// It's only intended for direct use with grpcapp.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_service.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddContact",
			Handler:    _Chat_AddContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _Chat_DeleteContact_Handler,
		},
		{
			MethodName: "AllContacts",
			Handler:    _Chat_AllContacts_Handler,
		},
		{
			MethodName: "IsMessaged",
			Handler:    _Chat_IsMessaged_Handler,
		},
		{
			MethodName: "AllMessaged",
			Handler:    _Chat_AllMessaged_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Chat_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Chat_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Chat_Update_Handler,
		},
		{
			MethodName: "ClearHistory",
			Handler:    _Chat_ClearHistory_Handler,
		},
		{
			MethodName: "AllUserChats",
			Handler:    _Chat_AllUserChats_Handler,
		},
		{
			MethodName: "AllChats",
			Handler:    _Chat_AllChats_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _Chat_CreateMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _Chat_UpdateMessage_Handler,
		},
		{
			MethodName: "AllMessages",
			Handler:    _Chat_AllMessages_Handler,
		},
		{
			MethodName: "IdentMessage",
			Handler:    _Chat_IdentMessage_Handler,
		},
		{
			MethodName: "IdentUser",
			Handler:    _Chat_IdentUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_service.proto",
}
